"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/weather/route";
exports.ids = ["app/api/weather/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_aparn_OneDrive_Desktop_phani_v_1_app_api_weather_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/weather/route.ts */ \"(rsc)/./app/api/weather/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/weather/route\",\n        pathname: \"/api/weather\",\n        filename: \"route\",\n        bundlePath: \"app/api/weather/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\aparn\\\\OneDrive\\\\Desktop\\\\phani\\\\v-1\\\\app\\\\api\\\\weather\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_aparn_OneDrive_Desktop_phani_v_1_app_api_weather_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/weather/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3ZWF0aGVyJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ3ZWF0aGVyJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGd2VhdGhlciUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhcGFybiU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q3BoYW5pJTVDdi0xJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNhcGFybiU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q3BoYW5pJTVDdi0xJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzRCO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va3Jpc2hpbWl0cmEvPzlmYTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcYXBhcm5cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxwaGFuaVxcXFx2LTFcXFxcYXBwXFxcXGFwaVxcXFx3ZWF0aGVyXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS93ZWF0aGVyL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvd2VhdGhlclwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvd2VhdGhlci9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGFwYXJuXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxccGhhbmlcXFxcdi0xXFxcXGFwcFxcXFxhcGlcXFxcd2VhdGhlclxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS93ZWF0aGVyL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/weather/route.ts":
/*!**********************************!*\
  !*** ./app/api/weather/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n// --- NEW Helper Functions ---\n// Determine Irrigation Status (Revised Logic)\nfunction getIrrigationStatus(temp, humidity, windSpeed, precipitation) {\n    // Priority 1: Recent Rain\n    if (precipitation > 1) {\n        return {\n            status: \"Recent significant rain. Irrigation likely unnecessary.\",\n            level: \"success\"\n        };\n    }\n    if (precipitation > 0.1) {\n        return {\n            status: \"Light recent rain detected. Check soil moisture before irrigating.\",\n            level: \"success\"\n        };\n    }\n    // Priority 2: High Evaporation Conditions (No recent rain)\n    const isHot = temp > 32;\n    const isDry = humidity < 45;\n    const isWindy = windSpeed > 5; // Wind speed in m/s\n    if (isHot && isDry && isWindy) {\n        return {\n            status: \"Hot, dry, and windy. High evaporation likely. Monitor soil urgently.\",\n            level: \"warning\"\n        };\n    }\n    if (isHot && isDry) {\n        return {\n            status: \"Hot and dry conditions. Increased evaporation likely. Check soil moisture.\",\n            level: \"warning\"\n        };\n    }\n    if (isHot) {\n        return {\n            status: \"High temperatures detected. Monitor soil moisture closely.\",\n            level: \"warning\"\n        };\n    }\n    if (isDry && isWindy) {\n        return {\n            status: \"Dry and windy. Increased evaporation likely. Check soil moisture.\",\n            level: \"warning\"\n        };\n    }\n    // Priority 3: Low Evaporation / Other factors\n    if (temp < 10) {\n        return {\n            status: \"Cool conditions reduce immediate need. Check soil before irrigating.\",\n            level: \"info\"\n        };\n    }\n    if (humidity > 80) {\n        return {\n            status: \"High humidity reduces evaporation. Check soil moisture if needed.\",\n            level: \"info\"\n        };\n    }\n    // Default: Moderate conditions\n    return {\n        status: \"Conditions moderate. Monitor soil moisture and irrigate as needed.\",\n        level: \"info\"\n    };\n}\n// Generate Crop Growth Advice\nfunction getCropAdvice(temp, humidity, windSpeed, suitableCrops) {\n    const advice = [];\n    if (suitableCrops.length === 0 || suitableCrops[0].includes(\"Not suitable\")) {\n        return [\n            \"Current conditions are not ideal for the primary listed crops.\"\n        ];\n    }\n    const cropsStr = suitableCrops.join(\", \");\n    if (temp > 35) {\n        advice.push(`Extreme Heat: High stress likely for ${cropsStr}. Ensure adequate water, consider shade.`);\n    } else if (temp > 30) {\n        advice.push(`High Temperature: Increase watering frequency for ${cropsStr} if soil is dry.`);\n    }\n    if (humidity > 85) {\n        advice.push(`High Humidity: Increases fungal risk for ${cropsStr}. Ensure good air circulation.`);\n    }\n    if (windSpeed > 12) {\n        advice.push(`Strong Winds: Potential for physical damage or affecting spraying operations for ${cropsStr}.`);\n    }\n    if (temp < 10) {\n        advice.push(`Low Temperatures: Growth may slow for ${cropsStr}. Protect sensitive plants if frost is forecast.`);\n    }\n    if (advice.length === 0) {\n        advice.push(`Current conditions seem generally favorable for ${cropsStr}. Monitor forecasts.`);\n    }\n    return advice.slice(0, 3); // Limit to 3 main advice points\n}\n// --- End NEW Helper Functions ---\n// --- City to State/Crop Mapping (Illustrative) ---\nconst cityStateCropMap = {\n    hyderabad: {\n        state: \"Telangana\",\n        crops: [\n            \"Rice (Paddy)\",\n            \"Cotton\",\n            \"Maize\",\n            \"Sorghum\",\n            \"Groundnut\"\n        ]\n    },\n    mumbai: {\n        state: \"Maharashtra\",\n        crops: [\n            \"Rice (Coastal)\",\n            \"Sorghum\",\n            \"Bajra\",\n            \"Sugarcane\",\n            \"Cotton\"\n        ]\n    },\n    chennai: {\n        state: \"Tamil Nadu\",\n        crops: [\n            \"Rice\",\n            \"Groundnut\",\n            \"Sugarcane\",\n            \"Cotton\",\n            \"Coconut\"\n        ]\n    },\n    kolkata: {\n        state: \"West Bengal\",\n        crops: [\n            \"Rice\",\n            \"Jute\",\n            \"Potatoes\",\n            \"Mustard\",\n            \"Vegetables\"\n        ]\n    },\n    delhi: {\n        state: \"Delhi NCR\",\n        crops: [\n            \"Wheat\",\n            \"Mustard\",\n            \"Vegetables\",\n            \"Bajra\"\n        ]\n    },\n    lucknow: {\n        state: \"Uttar Pradesh\",\n        crops: [\n            \"Wheat\",\n            \"Sugarcane\",\n            \"Rice\",\n            \"Potatoes\",\n            \"Mustard\"\n        ]\n    },\n    jaipur: {\n        state: \"Rajasthan\",\n        crops: [\n            \"Bajra\",\n            \"Mustard\",\n            \"Wheat\",\n            \"Pulses\",\n            \"Groundnut\"\n        ]\n    },\n    shimla: {\n        state: \"Himachal Pradesh\",\n        crops: [\n            \"Apples\",\n            \"Potatoes\",\n            \"Maize\",\n            \"Wheat\",\n            \"Barley\"\n        ]\n    },\n    bhopal: {\n        state: \"Madhya Pradesh\",\n        crops: [\n            \"Soybean\",\n            \"Wheat\",\n            \"Pulses\",\n            \"Maize\",\n            \"Cotton\"\n        ]\n    }\n};\n// --- Updated Helper function for Suitable Crops ---\nfunction getSuitableCrops(city, temp) {\n    const lowerCity = city.toLowerCase();\n    // 1. Check the static map first\n    if (cityStateCropMap[lowerCity]) {\n        // Optional: Could add temperature check here too for mapped cities\n        // e.g., if (temp < 5) return [\"Conditions too cold for typical crops in \" + cityStateCropMap[lowerCity].state];\n        return cityStateCropMap[lowerCity].crops;\n    }\n    // 2. Fallback to temperature-based logic (Slightly refined)\n    if (temp < 5) return [\n        \"Conditions too cold for most common crops\"\n    ];\n    if (temp < 15) return [\n        \"Wheat\",\n        \"Barley\",\n        \"Mustard\",\n        \"Potatoes\",\n        \"Carrots\"\n    ]; // Cooler crops\n    if (temp < 25) return [\n        \"Maize\",\n        \"Rice (Paddy)\",\n        \"Soybean\",\n        \"Tomatoes\",\n        \"Beans\"\n    ]; // Moderate temp crops\n    if (temp < 35) return [\n        \"Cotton\",\n        \"Sorghum\",\n        \"Groundnut\",\n        \"Millet\",\n        \"Sugarcane\"\n    ]; // Warmer crops\n    return [\n        \"Heat tolerant varieties (e.g., certain Millets, Dates)\"\n    ]; // Very hot\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const city = searchParams.get(\"city\"); // Get city name\n        if (!city) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"City name is required\"\n            }, {\n                status: 400\n            });\n        }\n        const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;\n        if (!OPENWEATHER_API_KEY) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Weather API key not configured\"\n            }, {\n                status: 500\n            });\n        }\n        // Fetch current weather by city name\n        const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${OPENWEATHER_API_KEY}&units=metric`);\n        if (!weatherResponse.ok) {\n            const errorData = await weatherResponse.json();\n            console.error(\"OpenWeatherMap API Error:\", errorData);\n            const errorMessage = errorData.message === \"city not found\" ? `City not found: ${city}` : \"Failed to fetch weather data\";\n            throw new Error(errorMessage);\n        }\n        const weatherData = await weatherResponse.json();\n        // Extract lat/lon for forecast\n        const lat = weatherData.coord.lat;\n        const lon = weatherData.coord.lon;\n        // Simplified estimated soil temperature (e.g., 2 degrees less than air temp)\n        const estimatedSoilTemp = Math.round(weatherData.main.temp - 2);\n        // Get suitable crops using NEW logic (pass city and temp)\n        const suitableCrops = getSuitableCrops(city, weatherData.main.temp);\n        // --- NEW: Calculate Irrigation Status and Crop Advice (Using updated getIrrigationStatus) ---\n        const irrigation = getIrrigationStatus(weatherData.main.temp, weatherData.main.humidity, weatherData.wind.speed, weatherData.rain?.[\"1h\"] || 0);\n        const advice = getCropAdvice(weatherData.main.temp, weatherData.main.humidity, weatherData.wind.speed, suitableCrops);\n        // --- END NEW ---\n        // Get forecast using lat/lon\n        const forecastData = await getForecast(lat.toString(), lon.toString(), OPENWEATHER_API_KEY);\n        // Get alerts (now without soil moisture)\n        const weatherAlerts = generateWeatherAlerts(weatherData.main.temp, weatherData.main.humidity, weatherData.wind.speed);\n        // Process weather data and add agricultural recommendations\n        const processedData = {\n            location: `${weatherData.name}, ${weatherData.sys.country}`,\n            dt: weatherData.dt,\n            weather: {\n                temperature: Math.round(weatherData.main.temp),\n                feelsLike: Math.round(weatherData.main.feels_like),\n                humidity: weatherData.main.humidity,\n                windSpeed: weatherData.wind.speed,\n                description: weatherData.weather[0].description,\n                icon: weatherData.weather[0].icon,\n                precipitation: weatherData.rain?.[\"1h\"] || 0,\n                estimatedSoilTemp: estimatedSoilTemp\n            },\n            suitableCrops: suitableCrops,\n            irrigationStatus: irrigation,\n            cropAdvice: advice,\n            forecast: forecastData,\n            alerts: weatherAlerts\n        };\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(processedData);\n    } catch (error) {\n        console.error(\"Weather API Route Error:\", error);\n        // Return specific error message if available (like 'City not found')\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: error.message || \"Failed to process weather request\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function getForecast(lat, lon, apiKey) {\n    try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"OpenWeatherMap Forecast API Error:\", errorData);\n            throw new Error(\"Failed to fetch forecast data\");\n        }\n        const data = await response.json();\n        return data.list.slice(0, 8).map((item)=>({\n                time: new Date(item.dt * 1000).toLocaleTimeString(\"en-US\", {\n                    hour: \"numeric\",\n                    // minute: '2-digit', // Optional: add minutes\n                    hour12: true\n                }),\n                temperature: Math.round(item.main.temp),\n                description: item.weather[0].description,\n                icon: item.weather[0].icon,\n                precipitation: item.rain?.[\"3h\"] || 0\n            }));\n    } catch (error) {\n        console.error(\"Forecast Fetch Error:\", error);\n        return []; // Return empty array on error\n    }\n}\n// Modify alerts function to remove soilMoisture dependency\nfunction generateWeatherAlerts(temperature, humidity, windSpeed) {\n    const alerts = [];\n    // Temperature alerts (keep as is)\n    if (temperature > 35) {\n        alerts.push({\n            type: \"high_temperature\",\n            severity: \"high\",\n            message: \"Extreme heat conditions. Increase irrigation and provide shade for sensitive crops.\",\n            recommendations: [\n                \"Water plants early morning or evening\",\n                \"Apply mulch to retain moisture\",\n                \"Monitor for heat stress symptoms\"\n            ]\n        });\n    } else if (temperature > 30) {\n        alerts.push({\n            type: \"high_temperature\",\n            severity: \"medium\",\n            message: \"High temperature conditions. Consider adjusting irrigation schedule.\",\n            recommendations: [\n                \"Maintain regular watering schedule\",\n                \"Check soil before watering\",\n                \"Protect sensitive crops\"\n            ]\n        });\n    }\n    // Low temperature alerts (added example)\n    if (temperature < 5) {\n        alerts.push({\n            type: \"low_temperature\",\n            severity: \"high\",\n            message: \"Potential frost conditions. Protect sensitive crops.\",\n            recommendations: [\n                \"Cover vulnerable plants\",\n                \"Ensure soil is moist (helps retain heat)\",\n                \"Monitor forecasts closely\"\n            ]\n        });\n    }\n    // Humidity alerts (keep as is)\n    if (humidity > 85) {\n        alerts.push({\n            type: \"high_humidity\",\n            severity: \"high\",\n            message: \"High humidity levels increase risk of fungal diseases.\",\n            recommendations: [\n                \"Monitor for disease symptoms\",\n                \"Ensure proper ventilation/spacing\",\n                \"Consider preventative fungicide application if necessary\"\n            ]\n        });\n    }\n    // Wind alerts (keep as is)\n    if (windSpeed > 15) {\n        alerts.push({\n            type: \"high_wind\",\n            severity: \"medium\",\n            message: \"Strong winds may damage crops and affect spraying operations.\",\n            recommendations: [\n                \"Delay pesticide/fertilizer application if possible\",\n                \"Secure row covers or tunnels\",\n                \"Check for physical damage to plants/structures\"\n            ]\n        });\n    }\n    // Remove soil moisture alerts\n    return alerts;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/weather/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Caparn%5COneDrive%5CDesktop%5Cphani%5Cv-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();